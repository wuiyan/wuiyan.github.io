{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "WUYAN的博客",
  "home_page_url": "https://wuiyan.github.io/",
  "feed_url": "https://wuiyan.github.io/feed.json",
  "description": "众里寻他千百度，蓦然回首，那人却在灯火阑珊处",
  "items": [
    {
      "title": "如何使用GithubAction自动部署VuePress到GithubPages",
      "url": "https://wuiyan.github.io/posts/2023-08-18-03.html",
      "id": "https://wuiyan.github.io/posts/2023-08-18-03.html",
      "summary": "如何使用GithubAction自动部署VuePress到GithubPages 提示 仓库名称必须严格按照 [你的GitHub用户名].github.io 格式来 否则会将网站部署到以仓库名称命名的子路径上 打开 repo 控制权限 依次进入仓库的 Settings=&gt;Action=&gt;General 打开以下两个权限：",
      "content_html": "<h1> 如何使用GithubAction自动部署VuePress到GithubPages</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">提示</p>\n<p>仓库名称必须严格按照 <code>[你的GitHub用户名].github.io</code> 格式来</p>\n<p>否则会将网站部署到以仓库名称命名的子路径上</p>\n</div>\n<h2> 打开 repo 控制权限</h2>\n<p>依次进入仓库的 Settings=&gt;Action=&gt;General</p>\n<p><strong>打开以下两个权限：</strong></p>\n<p>Workflow Permissions:</p>\n<ul class=\"task-list-container\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-0\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-0\"> Read and write permissions</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-1\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-1\"> Allow GitHub Actions to create and approve pull requests</label></p>\n</li>\n</ul>\n<h2> 编写Github WorkFlow配置文件</h2>\n<p>文件 <code>.github/workflows/deploy-github-pages.yml</code></p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>配置完成后应该会自动开始构建，在actions里可以看到构建详情，失败会显示原因\n以后每次push都会自动构建部署</p>\n<h2> 配置GitHub Pages</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>等待上一步action执行成功，再进行这一步</p>\n</div>\n<p>打开 Settings 中的 Pages 页面</p>\n<p>Source 选择 Deploy From Branch</p>\n<p>Branch 选择 gh-pages 然后save即可</p>\n<p>Pages 的构建流程这时应该会自动启动，等待几分钟，Pages 页面顶部就会显示部署成功后的域名啦。</p>\n<h2> <strong>完🎉</strong></h2>\n",
      "image": "https://images.unsplash.com/photo-1618401479427-c8ef9465fbe1?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=300&ixid=MnwxfDB8MXxyYW5kb218MHx8Z2l0aHVifHx8fHx8MTY5MjM0OTIxMA&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=800",
      "date_published": "2023-08-18T15:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "技术"
      ]
    },
    {
      "title": "防火墙常用命令",
      "url": "https://wuiyan.github.io/posts/Centos7%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html",
      "id": "https://wuiyan.github.io/posts/Centos7%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html",
      "summary": "启动|关闭|重启防火墙 systemctl status firewalld.service # 查看防火墙状态 systemctl start firewalld.service # 启动防火墙 systemctl stop firewalld.service # 关闭防火墙",
      "content_html": "<h5> 启动|关闭|重启防火墙</h5>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 防火墙配置命令</h5>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 附录</h5>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-15T22:54:45.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "JUL日志框架",
      "url": "https://wuiyan.github.io/posts/JUL%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "id": "https://wuiyan.github.io/posts/JUL%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "summary": "一、JUL框架介绍 JUL 全称 : Java util logging ，Java原生的日志框架，主要用于小型项目，使用方便。 作用：可以按照不同的层次分级去显示信息，将程序运行中的信息更加规范化的输出。 二、JUL组成介绍 Logger：也被称作记录器，是日志实现的基础。 Handler|Appenders：也被称作处理器，一个 Logger 可同时存在多个处理器，以其具体实现类决定日志的输出位置是控制台、文件还是网络上的其他日志服务器。 Layouts：也被称为Formatters，它负责对日志事件中的数据进行转换和格式化，它决定了日志记录的最终显示形式。 Level：日志输出级别，Logger 和 Handeler 都有一个 Level 级别，如两者出现冲突时，以级别高的等级为准。 Filters：过滤器，可以自主过滤掉不需要的日志信息，可以在 Logger 和 Handeler 上分别设置。",
      "content_html": "<h4> 一、JUL框架介绍</h4>\n<p>JUL 全称 : Java util logging ，Java原生的日志框架，主要用于小型项目，使用方便。</p>\n<p>作用：可以按照不同的层次分级去显示信息，将程序运行中的信息更加规范化的输出。</p>\n<h4> 二、JUL组成介绍</h4>\n<ul>\n<li><strong>Logger</strong>：也被称作记录器，是日志实现的基础。</li>\n<li><strong>Handler</strong>|Appenders：也被称作处理器，一个 Logger 可同时存在多个处理器，以其具体实现类决定日志的输出位置是控制台、文件还是网络上的其他日志服务器。</li>\n<li><strong>Layouts</strong>：也被称为Formatters，它负责对日志事件中的数据进行转换和格式化，它决定了日志记录的最终显示形式。</li>\n<li><strong>Level</strong>：日志输出级别，Logger 和 Handeler 都有一个 Level 级别，如两者出现冲突时，以级别高的等级为准。</li>\n<li><strong>Filters</strong>：过滤器，可以自主过滤掉不需要的日志信息，可以在 Logger 和 Handeler 上分别设置。</li>\n</ul>\n<figure><img src=\"/assets/images/JUL/流程图.png\" alt=\"流程图\" tabindex=\"0\" loading=\"lazy\"><figcaption>流程图</figcaption></figure>\n<h4> 三、日志等级划分</h4>\n<p>在JUL中日志被划分为七个等级，由高到低分别为：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还有两个特殊等级 OFF和ALL，OFF用于关闭日志记录，ALL用于启用所有的消息日志记录。</p>\n<p>需注意，虽然日志等级被分为了七个等级，<strong>但默认只显示INFO及以上等级。</strong></p>\n<h4> 四、日志框架的基础使用</h4>\n<p>1、获取当前类的 logger 对象</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、输出日志信息</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 五、日志框架的自定义配置</h4>\n<p>对于JUL日志框架来说，可以设定其日志输出等级，日志处理器类型，输出日志格式，过滤器配置。</p>\n<p>可以通过两种方式去设置：程序中设置和配置文件设置，文件设置是比较常用且方便的格式。</p>\n<p>1、常用配置文件设置</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>加载配置文件：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>2、程序中设置</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 六、日志处理器的分类</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">ConsoleHandeler（控制台日志处理器）</th>\n<th style=\"text-align:center\">FileHandler（文件日志处理器）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>日志输出位置</strong></td>\n<td style=\"text-align:center\">输出到控制台</td>\n<td style=\"text-align:center\">输出到文件</td>\n</tr>\n<tr>\n<td><strong>日志输出格式</strong></td>\n<td style=\"text-align:center\">默认是普通文本格式</td>\n<td style=\"text-align:center\">默认是xml格式</td>\n</tr>\n<tr>\n<td><strong>写入方式</strong></td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">可以设置是否追加写入，默认是false</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">Logger的默认日志处理器</td>\n<td style=\"text-align:center\">无</td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://wuiyan.github.io/assets/images/JUL/流程图.png",
      "date_published": "2023-04-15T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "Java日期时间格式化的规则解析",
      "url": "https://wuiyan.github.io/posts/Java%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90.html",
      "id": "https://wuiyan.github.io/posts/Java%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90.html",
      "summary": "格式说明 在Java中表示日期和时间格式时，通常采用英文缩写的方式来对于日期和时间进行显示或解析，不同的英文字母表示的含义各不相同，甚至在一些日期或时间的表示位置上大小写不同也会导致结果出现变化，下面是关于日期时间格式显示和解析的总结。 基准形式：年-月-日 时:分:秒 表示形式：yyyy-MM-dd hh:mm:ss 日期时间格式有多种多样的表示方式，对于不同的定义或类库都有不同的实现，本文的描述是基于上述较为常用的形式来进行探讨和总结。",
      "content_html": "<h3> 格式说明</h3>\n<p>在Java中表示日期和时间格式时，通常采用英文缩写的方式来对于日期和时间进行显示或解析，不同的英文字母表示的含义各不相同，甚至在一些日期或时间的表示位置上大小写不同也会导致结果出现变化，下面是关于日期时间格式显示和解析的总结。</p>\n<blockquote>\n<p>基准形式：<code>年-月-日 时:分:秒</code>\n表示形式：<code>yyyy-MM-dd hh:mm:ss</code></p>\n</blockquote>\n<p>日期时间格式有多种多样的表示方式，对于不同的定义或类库都有不同的实现，本文的描述是基于上述较为常用的形式来进行探讨和总结。</p>\n<h3> 日期格式</h3>\n<h5> 年（Year）：使用 Y 或者 y 表示</h5>\n<ul>\n<li>Y：表示周年，周年是以周来进行计算的单位，通常与周数一同使用，表示当前周处于哪一年，适用于出现一个周跨两个年的情况，此时会根据当前周的大部分日子属于哪一年来判断此周属于哪一年</li>\n<li>y：表示日历年，即实际使用的年份，通常使用的便是这种形式</li>\n</ul>\n<h5> 月（Month）：使用 M 表示</h5>\n<ul>\n<li>M：表示数字月份，1-12月，在个位数月份时会直接显示对应的数字，而不是在前方追加0</li>\n<li>MM：表示两位数月份，01-12月，在个位数月份时会在前方追加占位用的0</li>\n</ul>\n<blockquote>\n<p>不同位数的日期表示形式在显示的时候仅仅是有无添加相应的占位符，需注意的是在通过指定格式来解析日期字符串时，若待解析的日期字符串和指定解析格式位数不同，则会出现解析错误</p>\n</blockquote>\n<h5> 日（Day）：使用 D 或者 d表示</h5>\n<ul>\n<li>D：表示在当前年份中的天数，表示形式为：1-365天</li>\n<li>DDD：表示在当前年份中的天数，表示形式为：001-365天，始终为三位数</li>\n<li>d：表示当前月份中的天数，表示形式为：1-31天</li>\n<li>dd：表示当前月份中的天数，表示形式为01-31天，通常使用此种方式表示天数</li>\n</ul>\n<h3> 时间格式</h3>\n<h5> 时（Hour）：使用 H 或者 h 表示</h5>\n<ul>\n<li>H：表示24小时制，表示形式为：0-23时</li>\n<li>HH：表示24小时制，表示形式为：00-23时，始终为两位数</li>\n<li>h：表示12小时制，表示形式为：1-12时</li>\n<li>hh：表示12小时制，表示形式为01-12时，始终为两位数，使用十二小时制，需要有时期标识（AM/PM）来表示上午和下午，这样才能够完整的显示当前时间</li>\n</ul>\n<h5> 分（Minute）：使用 m 表示</h5>\n<ul>\n<li>m：表示分钟，1-59分</li>\n<li>mm：表示分钟，01-59分，始终为两位数</li>\n</ul>\n<h5> 秒（Seconds）：使用 s 表示</h5>\n<ul>\n<li>s：表示秒，1-59秒</li>\n<li>ss：表示秒，01-59秒，始终为两位数</li>\n</ul>\n<h3> 其他格式</h3>\n<h5> 毫秒（Milliseconds）：使用 S 表示</h5>\n<ul>\n<li>SSS：表示毫秒数，通常使用三位表示，形式为：000-999</li>\n</ul>\n<blockquote>\n<p>含有毫秒的格式展示为：<code>yyyy-MM-dd HH:mm:ss.SSS</code> 使用 <code>.</code> 来作为秒和毫秒之间的分隔</p>\n</blockquote>\n<h5> 时期（AM/PM）：使用 a 表示</h5>\n<ul>\n<li>a：表示时期标识，展示形式为：AM（上午）/ PM（下午）</li>\n</ul>\n<blockquote>\n<p>含有时期的表示形式可以为：<code>yyyy-MM-dd hh:mm:ss a</code> 时间和时期之间通过空格区分</p>\n</blockquote>\n<h5> 时区：使用 Z 或者 z 表示</h5>\n<ul>\n<li>Z：表示时区的偏移量、如+0800、-0500</li>\n<li>z：表示时区的字符缩写，如：CST、GMT，以空格作为分隔符号，追加在最后方</li>\n</ul>\n<h5> 周（Week）：使用 W 或者 w 表示</h5>\n<ul>\n<li>W：表示当前月份中的周数，表示为：1-52/53周</li>\n<li>w：表示当前年份中的周数，表示为：1-4周</li>\n</ul>\n<blockquote>\n<p>以周为单位进行表示：<code>YYYY-ww E</code> ，以 - 作为分隔符，国内使用情况较少，E用来表示具体的星期几</p>\n</blockquote>\n<h3> 应用案例</h3>\n<p>Java中较为常用的格式化类有许多，实现方式也相当多种方式</p>\n<p>个人常用的有两种： <code>SimpleDateFormat</code>（适用于老版 Java）、<code>DateTimeFormatter</code>（推荐，支持Java 8+）</p>\n<h5> <code>SimpleDateFormat</code>（适用于老版 Java）</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <code>DateTimeFormatter</code>（推荐，支持Java 8+）</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 常用的格式</h3>\n<ol>\n<li><strong>完整日期时间（24小时制）：</strong> <code>yyyy-MM-dd HH:mm:ss</code></li>\n<li><strong>仅日期：</strong> <code>yyyy-MM-dd</code></li>\n<li><strong>仅时间（24小时制）：</strong> <code>HH:mm:ss</code></li>\n<li><strong>带时区的日期时间：</strong> <code>yyyy-MM-dd HH:mm:ss z</code></li>\n</ol>\n<h3> 总结</h3>\n<p>在进行日期和时间格式的展示或解析时，应了解各个字符的含义以及不同大小写和数量的情况下对于最终的展示效果或者解析结果有着什么样的影响，根据具体业务需求选择正确的格式组合。</p>\n<h3> <strong>通用的日期时间格式化字符含义</strong></h3>\n<p>以下字符是通用的，适用于Java的日期时间类，如<code>SimpleDateFormat</code>、<code>DateTimeFormatter</code>等。</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Y</code></td>\n<td>周年</td>\n<td><code>2025</code></td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>日历年</td>\n<td><code>2025</code></td>\n</tr>\n<tr>\n<td><code>M</code></td>\n<td>月（1-12）</td>\n<td><code>1</code>, <code>12</code></td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td>日（1-31）</td>\n<td><code>1</code>, <code>31</code></td>\n</tr>\n<tr>\n<td><code>H</code></td>\n<td>24小时制的小时</td>\n<td><code>0</code>, <code>23</code></td>\n</tr>\n<tr>\n<td><code>h</code></td>\n<td>12小时制的小时</td>\n<td><code>1</code>, <code>12</code></td>\n</tr>\n<tr>\n<td><code>m</code></td>\n<td>分钟（0-59）</td>\n<td><code>0</code>, <code>59</code></td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td>秒（0-59）</td>\n<td><code>0</code>, <code>59</code></td>\n</tr>\n<tr>\n<td><code>S</code></td>\n<td>毫秒</td>\n<td><code>123</code></td>\n</tr>\n<tr>\n<td><code>a</code></td>\n<td>上午/下午标识</td>\n<td><code>AM</code>, <code>PM</code></td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>时区名称</td>\n<td><code>PST</code>, <code>CST</code></td>\n</tr>\n<tr>\n<td><code>Z</code></td>\n<td>时区偏移量</td>\n<td><code>+0800</code></td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2024-12-10T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "maven常用依赖",
      "url": "https://wuiyan.github.io/posts/Java%E7%9A%84maven%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96.html",
      "id": "https://wuiyan.github.io/posts/Java%E7%9A%84maven%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96.html",
      "summary": "记录一些常用的maven依赖坐标 1、mybatis 框架 &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.13&lt;/version&gt; &lt;/dependency&gt;",
      "content_html": "<p>记录一些常用的maven依赖坐标</p>\n<h5> 1、mybatis 框架</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、mysql 连接驱动</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、lombok 依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、junit5 依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 5、maven打包插件</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 6、tomcat 依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 7、maven的war打包插件</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-04-11T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "Junit单元测试",
      "url": "https://wuiyan.github.io/posts/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "id": "https://wuiyan.github.io/posts/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "summary": "需要先导入Junit依赖才可以使用。 @TEST 注解 Junit最重要的一个注解，在方法上添加上@Test注解后，就可以单独执行这个方法，可以方便的进行测试。 注意事项： 此方法应该是public类型 此方法的返回值应为 void 此方法没有参数 此方法不是静态方法 @Before 注解 使用此注解标记的方法，会在测试方法前执行，且默认每个测试方法执行前都会执行一次此方法。 @After 注解",
      "content_html": "<p>需要先导入Junit依赖才可以使用。</p>\n<h5> @TEST 注解</h5>\n<p>Junit最重要的一个注解，在方法上添加上@Test注解后，就可以单独执行这个方法，可以方便的进行测试。</p>\n<p>注意事项：</p>\n<ul>\n<li>此方法应该是public类型</li>\n<li>此方法的返回值应为 void</li>\n<li>此方法没有参数</li>\n<li>此方法不是静态方法</li>\n</ul>\n<h5> @Before 注解</h5>\n<p>使用此注解标记的方法，会在测试方法前执行，且默认每个测试方法执行前都会执行一次此方法。</p>\n<h5> @After 注解</h5>\n<p>使用此注解标记的方法，会在测试方法后执行，进行相应的收尾工作。</p>\n<h5> 断言工具类</h5>\n<p>用于判断执行结果和预期值是否一致，</p>\n<p>Assert.assertArrayEquals()</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-28T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "LomBok-小辣椒插件学习笔记",
      "url": "https://wuiyan.github.io/posts/LomBok-%E5%B0%8F%E8%BE%A3%E6%A4%92%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "id": "https://wuiyan.github.io/posts/LomBok-%E5%B0%8F%E8%BE%A3%E6%A4%92%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "summary": "一、LomBok插件概述 LomBok插件是一款插件化注解API，可以在Java程序编译时根据注解为程序添加一些必需的通用代码，如常用的Getter、Setter、有参和无参构造方法等。 使用这款插件可以在很大程度上简化程序员所需要书写的代码量，但也有可能会带来一些意想不到的小问题，使程序的可读性变差。 二、LomBok插件配置方法 1、导入依赖包，可以通过maven或者手动导入的方式完成。 2、在IDEA中安装LomBok插件(在IDEA的新版本中默认是绑定安装的) 插件的作用：在java文件编译之后的class文件中确实会包含get、set方法，但在书写源码时是没有这些方法的定义的，IDEA会认为这是错误，所以这个时候就需要一个lombok插件来解决问题。",
      "content_html": "<h4> 一、LomBok插件概述</h4>\n<p>LomBok插件是一款插件化注解API，可以在Java程序编译时根据注解为程序添加一些必需的通用代码，如常用的Getter、Setter、有参和无参构造方法等。</p>\n<p>使用这款插件可以在很大程度上简化程序员所需要书写的代码量，但也有可能会带来一些意想不到的小问题，使程序的可读性变差。</p>\n<h4> 二、LomBok插件配置方法</h4>\n<p>1、导入依赖包，可以通过maven或者手动导入的方式完成。</p>\n<p>2、在IDEA中安装LomBok插件(在IDEA的新版本中默认是绑定安装的)</p>\n<p>插件的作用：在java文件编译之后的class文件中确实会包含get、set方法，但在书写源码时是没有这些方法的定义的，IDEA会认为这是错误，所以这个时候就需要一个lombok插件来解决问题。</p>\n<p>3、重启IDEA后，就可以开始使用LomBok插件的功能了，如果在运行时有报错，可能是插件没能正常加载，再次重启IDEA就好。</p>\n<h4> 三、LomBok插件常用注解</h4>\n<h5> 1、@Getter</h5>\n<p>作用：用来给成员变量生成相应的get方法，同时可以为生成的方法指定访问修饰符，默认修饰符是 public ，也可手动指定修饰符。</p>\n<p>位置：指定在类上，会对当前类的所有字段都生成相应的get方法，指定在字段上，只会对当前字段生效，当类和字段都设定上后，字段部分的设定优先生效。</p>\n<p>注：@Getter注解在指定类的时候，默认不会对 静态变量 生效，需要手动在静态字段上指定才可以，对于 final 常量可以正常生效。</p>\n<h5> 2、@Setter</h5>\n<p>作用：用来给成员变量生成相应的set方法，同时可以为生成的方法指定访问修饰符，默认修饰符是 public ，也可手动指定修饰符。</p>\n<p>位置：同 @Getter 的用法。</p>\n<p>注：@Setter注解在指定类的时候，默认也不会对 静态变量 生效，需要手动在静态字段上指定才可以，但对于 final 常量不可以生效。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、@Accessors</h5>\n<p>作用：这个注解要与@Getter与@Setter搭配使用，用来修改默认的setter与getter方法的形式。</p>\n<p>位置：可指定在类和字段上。</p>\n<p><strong>属性</strong>：</p>\n<p>3.1、chain 属性，属性值有true和false两种，默认是false，打开后可以让set方法支持链式调用，也就是set方法会返回对象本身。</p>\n<p>3.2、fluent 属性，属性值有true和false两种，默认也是false，打开后会使get和set方法的名字变得和成员变量的名称一样，通过重载去调用git和set。</p>\n<p>注：@Getter和@Setter注解生成的get和set方法的命名规则</p>\n<p>默认是在get或set后将原变量名的开头字母大写，再拼接到一块，若原本就是大写，则不进行改变。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、@ToString</h5>\n<p>作用：用于格式化输出对象和toString方法类似，生成方法时只会使用类中的非静态成员变量。</p>\n<p>位置：只能指定在类上。</p>\n<p><strong>属性</strong>：</p>\n<ul>\n<li>includeFieldNames = true    // 输出时是否显示字段名 ，默认是true</li>\n<li>exclude = {\"name\"}     // 排除某些字段，可多选，用逗号分隔就好</li>\n<li>of = {\"age\"}      // 只输出某些字段，和exclude不能同时使用</li>\n<li>callSuper = true //是否输出父类对象的toString信息， 默认false</li>\n<li>doNotUseGetters   // 输出时不使用get方法获取成员属性</li>\n</ul>\n<p>@ToString.Include.rank  用于排序，数字越大排序越靠前，只能适用于字段和方法类型。</p>\n<p>@ToString.Include.name  用于自定义字段名称，也只能适用于字段和方法。</p>\n<h5> 5、@EqualsAndHashCode</h5>\n<p>作用：用于生成equals和hashCode方法，也是只会使用非静态成员变量。</p>\n<p>位置：只能指定在类上。</p>\n<p><strong>属性</strong>：</p>\n<ul>\n<li>callSuper 用于比较父类对象是否相同，对于继承的子类的equals方法中最好使用这个选项，可以提高安全性，防止将父类对象和子类对象当成相同的对象。默认是false</li>\n<li>cacheStrategy 对于hashCode方法是否添加缓存，在使用时会将第一次结果保存在变量中，下次就可以直接调用使用，默认是从不。</li>\n<li>exclude = {\"name\"}     // 排除某些字段，可多选，用逗号分隔就好</li>\n<li>of = {\"age\"}      // 只输出某些字段，和exclude不能同时使用</li>\n</ul>\n<h5> 6、构造器相关注解</h5>\n<p><strong>共同点：</strong></p>\n<p>都只能在类上使用。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h6> (1)、@AllArgsConstructor</h6>\n<p>作用：生成所有参数的构造方法，</p>\n<h6> (2)、@NoArgsConstructor</h6>\n<p>作用：生成无参的构造方法</p>\n<p><strong>特有属性</strong>：force：可以将所有 final 字段初始化为 0、null、false。默认为 false。</p>\n<h6> (3)、@RequiredArgsConstructor</h6>\n<p>作用：会将类中所有带有<code>@NonNull注解</code> 的或者带有<code>final修饰的成员变量</code>生成对应的构造方法。</p>\n<h5> 7、@Data</h5>\n<p>作用：相当于注解集合。效果等同于 <strong>@Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor</strong> 效果同和这5个注解的效果。</p>\n<p>注：该注解并不包括@NoArgsConstructor和@AllArgsConstructor注解效果，且在有继承的情况下不建议单独使用此注解，因为这里的equals方法没有经过设定，容易出现问题，应和@EqualsAndHashCode配合使用。</p>\n<p>位置：指定在类中</p>\n<p><strong>属性</strong>：staticConstructor：为生成的构造器指定自定义方法名称。</p>\n<h5> 8、@value</h5>\n<p>作用： 将字段都变成不可变类型：<strong>使用final修饰， 同时还包含@ToString、@EqualsAndHashCode、@AllArgsConstructor 、@Getter</strong>(注意只有Getter没有Setter)和@Data的作用比较类似。</p>\n<p>位置：指定在类上</p>\n<p><strong>属性</strong>：staticConstructor：为生成的构造器指定自定义方法名称。</p>\n<h5> 9、@SneakyThrows</h5>\n<p>作用：用于构建try-catch语句将方法包括起来。</p>\n<p>位置：指定在方法或构造方法上</p>\n<p><strong>属性</strong>：value： 用于指明要抛出的异常类型，默认是Throwable</p>\n<h5> 10、@Cleanup</h5>\n<p>作用：主要用来修饰 IO 流相关类, 会在 finally 代码块中对该资源进行 close();</p>\n<p>位置：作用于局部变量中</p>\n<p><strong>属性</strong>：value：指定关闭方法的方法名，默认是close。</p>\n<p>注：也可以使用try-with-resources的写法，也可以自动关闭歹有autoclose的连接。</p>\n<h5> 11、@Builder</h5>\n<p>作用：建造者模式，一种比较重要的创建对象的过程，不再是生成一个构造方法，而是使用了一个内部类来完成对象的创建，可以精细化、分步去进行一个类对象的创建。</p>\n<p>构造器类的的set方法支持链式调用</p>\n<p>位置：类、方法、构造器上使用</p>\n<p><strong>属性</strong>：</p>\n<p><code>builderMethodName</code>：生成builder内部类对象的方法名称，默认是：builder</p>\n<p><code>buildMethodName</code>： 返回建造对象的方法名称，默认是：build</p>\n<p><code>builderClassName</code>：内部类的类名，</p>\n<p><code>toBuilder</code>： 将build重新变回builder进行再次设置，默认为false</p>\n<p><strong>@Builder.Default</strong></p>\n<p>使用在属性上，用于指定某个属性的默认值，若无设置则使用默认值。</p>\n<p><strong>@Builder.ObtainVia</strong></p>\n<p>使用在属性上和方法内的参数里，用于对toBuilder方法生成的builder对象的值或方法的获取方式做一些限定。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 四、LomBok插件优缺点</h4>\n<p>优点：</p>\n<p>可以帮助我们省去很多冗余代码，使项目的开发更加高效、便捷。</p>\n<p>缺点：</p>\n<p>有很高的侵入性，在项目中有人使用会使得所有的人都要去使用这种插件，</p>\n<p>会让代码可读性变差，调试起来也更加麻烦</p>\n<p>同时过度使用可能会创造很多用不到的方法，造成隐患。</p>\n",
      "date_published": "2023-03-16T22:54:45.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "MySQL数据库学习笔记",
      "url": "https://wuiyan.github.io/posts/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "id": "https://wuiyan.github.io/posts/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "summary": "一、数据库简介 MySQL数据库是一款关系型数据库管理系统，主要用于中小规模的数据的存储和处理，是现在相当流行的一款数据库类型。 关系型数据库是采用了关系模型来组织数据的数据库，实体之间的关系有一对一、一对多、多对多三种。 二、数据库的三大范式 范式：数据库设计时需要遵循一定的种规则，在关系型数据库中，这种规则就被称为范式。 1、第一范式(1NF)： 基本数据项不可再分，也就是属性已经是最小的了，不能再继续向下划分。 2、第二范式(2NF)： 满足第一范式的前提下，要有一个主键且其他属性要完全依赖于主键。",
      "content_html": "<h4> 一、数据库简介</h4>\n<p>MySQL数据库是一款关系型数据库管理系统，主要用于中小规模的数据的存储和处理，是现在相当流行的一款数据库类型。</p>\n<p>关系型数据库是采用了关系模型来组织数据的数据库，实体之间的关系有一对一、一对多、多对多三种。</p>\n<h4> 二、数据库的三大范式</h4>\n<p>范式：数据库设计时需要遵循一定的种规则，在关系型数据库中，这种规则就被称为范式。</p>\n<h5> 1、第一范式(1NF)：</h5>\n<p>基本数据项不可再分，也就是属性已经是最小的了，不能再继续向下划分。</p>\n<h5> 2、第二范式(2NF)：</h5>\n<p>满足第一范式的前提下，要有一个主键且其他属性要完全依赖于主键。</p>\n<h5> 3、第三范式(3NF)：</h5>\n<p>在满足第二范式的前提下，所有属性不能传递依赖于主键。</p>\n<p>在此之外还有一些其他的范式存在，比如第四范式(BCNF)等，但一般情况下满足三大范式就已经是一个比较成功的数据库设计了。</p>\n<h4> 三、SQL语句</h4>\n<h5> 1、介绍</h5>\n<p>SQL语句也被称作结构化查询语句，主要用于对关系型数据库进行各种操作，如：增删查改、建库删库等。</p>\n<p>基本上所有的关系型数据库都支持SQL语言，但不同的关系型数据库SQL的细节方面会有些区别，不过都大同小异。</p>\n<h5> 2、特点：</h5>\n<p>(1)、支持多行书写。</p>\n<p>(2)、每一行语句都以分号结尾。</p>\n<p>(3)、其本身不区分大小写。</p>\n<h5> 3、分类</h5>\n<p>SQL语句依据实现的功能不同可分为四种：</p>\n<p>(1)、数据库查询语言(DQL)</p>\n<p>主要用于查询数据库中表的记录，关键字有select、from、where等。</p>\n<p>(2)、数据库操作语言(DML)</p>\n<p>主要用于对数据库中的数据进行添加、更新和删除操作，关键字有insert、delete、update等。</p>\n<p>(3)、数据库定义语言(DDL)</p>\n<p>主要用于定义和删除数据库对象，如数据库、表、列等，关键字有create，alter，drop等。</p>\n<p>(4)、数据库控制语言(DCL)</p>\n<p>主要用于数据库的访问权限、安全级别以及用户管理等，关键字有grant等。</p>\n<h5> 4、数据库定义语言的使用</h5>\n<p>(1)、创建数据库</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>(2)、删除数据库</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>(3)、创建表</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>(4)、修改表</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>举例：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>(5)、删除表</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 附录</h3>\n<h4> 一、约束条件</h4>\n<h5> 1、列级约束条件</h5>\n<p>对一个数据列建立的约束，就被称为列级约束条件。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">约束条件</th>\n<th style=\"text-align:center\">约束描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">primary key</td>\n<td style=\"text-align:center\">主键约束，约束的值可唯一的标识对应的记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">foreign key</td>\n<td style=\"text-align:center\">外键约束，约束与表之间的关系</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unique</td>\n<td style=\"text-align:center\">唯一约束，约束字段的值是惟一的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not null</td>\n<td style=\"text-align:center\">非空约束，非空字段的值不能为空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">默认值约束，用于保证该字段在不设置具体的内容时，有一个默认值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">check</td>\n<td style=\"text-align:center\">检查约束，限制某个字段的值取值范围，MySQL8支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">auto_increment</td>\n<td style=\"text-align:center\">自增约束可以使表中某个字段的值自动增加，但一张表中只能存在一个自增长字段，</td>\n</tr>\n</tbody>\n</table>\n<h5> 2、表级约束条件</h5>\n<p>一般是对多个数据列建立的约束，但也可以应用于一列上。</p>\n<table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>约束描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>primary key</td>\n<td>主键约束，约束的值可唯一的标识对应的记录</td>\n</tr>\n<tr>\n<td>foreign key</td>\n<td>外键约束，约束与表之间的关系</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>唯一约束，约束字段的值是惟一的</td>\n</tr>\n<tr>\n<td>check</td>\n<td>检查约束，限制某个字段的值取值范围</td>\n</tr>\n</tbody>\n</table>\n<h4> 二、SQL常用数据类型</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">大小</th>\n<th style=\"text-align:center\">无符号范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">SMALLINT</td>\n<td style=\"text-align:center\">整数</td>\n<td style=\"text-align:center\">2 Bytes</td>\n<td style=\"text-align:center\">(0，65 535)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INT</td>\n<td style=\"text-align:center\">整数</td>\n<td style=\"text-align:center\">4 Bytes</td>\n<td style=\"text-align:center\">(0，4 294 967 295)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FLOAT</td>\n<td style=\"text-align:center\">浮点型</td>\n<td style=\"text-align:center\">4 Bytes</td>\n<td style=\"text-align:center\">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOUBLE</td>\n<td style=\"text-align:center\">浮点型</td>\n<td style=\"text-align:center\">8 Bytes</td>\n<td style=\"text-align:center\">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DATETIME</td>\n<td style=\"text-align:center\">日期和时间类型</td>\n<td style=\"text-align:center\">8 Bytes</td>\n<td style=\"text-align:center\">'1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CHAR</td>\n<td style=\"text-align:center\">字符串类型</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">大小可以自行设置，是定长字符串，0-255 Bytes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VARCHAR</td>\n<td style=\"text-align:center\">字符串类型</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">大小可以自行设置，是可变字符串，0-65535 Bytes</td>\n</tr>\n</tbody>\n</table>\n<p>梗知识</p>\n<ul>\n<li>CRUD程序员，CRUD是数据库增删查改英文的缩写，用这个来形容程序员是有些贬义的，但更多的是用来自嘲玩梗。</li>\n</ul>\n",
      "date_published": "2023-03-15T22:54:45.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "SSM框架使用教程",
      "url": "https://wuiyan.github.io/posts/SSM%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",
      "id": "https://wuiyan.github.io/posts/SSM%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",
      "summary": "SSM框架使用教程 通过注解配置spring框架 1、添加spring的坐标依赖 &lt;!--spring 框架依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.3.19&lt;/version&gt; &lt;/dependency&gt;",
      "content_html": "<h2> SSM框架使用教程</h2>\n<h3> 通过注解配置spring框架</h3>\n<h5> 1、添加spring的坐标依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、创建spring配置类</h5>\n<p>作用相当于spring的xml配置文件，使用@Configuration注解指定</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、创建基础Bean对象</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、通过配置类加载spring配置</h5>\n<div class=\"language-Java line-numbers-mode\" data-ext=\"Java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 5、获取Bean对象</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 通过注解配置springmvc</h3>\n<h5> 1、添加springmvc的坐标依赖：</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、web模块和配置类实现</h5>\n<p>检查当前项目有无web模块，若没有则在项目设置中添加，添加后注意修改其路径，让其处于src/main/目录下。</p>\n<p>springmvc需要多个配置类才可以实现其全部功能，主要有：</p>\n<ul>\n<li>WebInitializer类：继承AbstractAnnotationConfigDispatcherServletInitializer，用于代替web.xml配置DispatcherServlet</li>\n<li>WebServletConfiguration类，mvc关于webServlet的配置类，需要着重配置。</li>\n<li>MainConfiguration类，mvc关于root的配置类，可暂时空置。</li>\n</ul>\n<p>对于WebInitializer类：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于WebServletConfiguration类：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>若使用Thymeleaf配置视图解析器</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、创建测试类</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、tomcat启动配置</h5>\n<p>检查tomcat部署有无工件，若没有工件，则自行创建，创建时需注意，应基于当前的web模块进行创建，创建类型为web应用程序 展开型。</p>\n<p>url和应用程序上下文都可调整，但需保持同步。之后就可以请求测试返回结果了。</p>\n<h5> 5、附录--自定义mvc中的web配置</h5>\n<p>如果想对于WebServletConfiguration类进行一些自定义配置可以实现WebMvcConfigurer接口，同时要加上@EnableWebMvc注解来启用mvc的自定义配置，不然自定义配置可能无法生效。</p>\n<p>常用方法：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 通过注解配置Mybatis框架</h3>\n<h5> 1、添加Mybatis的坐标依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、添加配置类MybatisConfiguration</h5>\n<p>它相当于Mybatis的xml配置文件本身，下面是相应配置</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、添加mapper映射</h5>\n<p>在配置类指定的mapper包下创建mapper接口，编写相应的SQL语句，对应xml相应的mapper配置</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、添加具体实现</h5>\n<p>编写相应的实现类，去执行相应的mapper中的SQL语句，为了解耦，可以让实现类实现接口，通过接口去调用具体的实现类，实现类和接口要放在配置类中指定的Bean对象的扫描目录</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 5、编写测试类，测试实验效果</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 附录--配置类中的部分注解说明</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解名称</th>\n<th style=\"text-align:center\">@Configuration</th>\n<th style=\"text-align:center\">@Bean</th>\n<th style=\"text-align:center\">@ComponentScan</th>\n<th style=\"text-align:center\">@MapperScan</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">作用</td>\n<td style=\"text-align:center\">指定当前类为配置类</td>\n<td style=\"text-align:center\">在配置类中使用，指定当前方法返回的对象为Bean对象</td>\n<td style=\"text-align:center\">将指定目录存在@Component注解的类注册为Bean对象</td>\n<td style=\"text-align:center\">将指定目录的mapper接口类注册为Bean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类比</td>\n<td style=\"text-align:center\">相当于xml配置文件</td>\n<td style=\"text-align:center\">相当于xml中的&lt;bean&gt;标签</td>\n<td style=\"text-align:center\">相当于扫描器</td>\n<td style=\"text-align:center\">相当于扫描器</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2023-06-15T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "SSM框架"
      ]
    },
    {
      "title": "Servlet 体系结构概述",
      "url": "https://wuiyan.github.io/posts/Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.html",
      "id": "https://wuiyan.github.io/posts/Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.html",
      "summary": "Servlet 体系结构概述 1、servlet 的概念： servlet 是用于处理请求并动态生成响应内容返回给客户端的一种接口规范，只是定义了接口，并没有去实现，有些类似于JDBC的样子，它也有许多不同的实现类。 2、体系结构 顶级接口：Servelt 接口\tServeltConfig 接口 继承自 Servelt 的接口和实现类： 顶级父接口：Servlet。 次级实现类或接口：GenericServlet 实现类、ServletRequest 接口、ServletResponse 接口。 Http请求处理：HttpServlet 实现类、HttpServletRequest 接口、HttpServletResponse 接口",
      "content_html": "<h3> Servlet 体系结构概述</h3>\n<h5> 1、servlet 的概念：</h5>\n<p>servlet 是用于处理请求并动态生成响应内容返回给客户端的一种接口规范，只是定义了接口，并没有去实现，有些类似于JDBC的样子，它也有许多不同的实现类。</p>\n<h5> 2、体系结构</h5>\n<p>顶级接口：Servelt 接口\tServeltConfig 接口</p>\n<p>继承自 Servelt 的接口和实现类：</p>\n<ul>\n<li>顶级父接口：Servlet。\n<ul>\n<li>次级实现类或接口：GenericServlet 实现类、ServletRequest 接口、ServletResponse 接口。\n<ul>\n<li>Http请求处理：HttpServlet 实现类、HttpServletRequest 接口、HttpServletResponse 接口</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure><img src=\"/assets/images/Servlet/1.png\" alt=\"关系图\" tabindex=\"0\" loading=\"lazy\"><figcaption>关系图</figcaption></figure>\n<p>一般处理请求比较常用的是带Http请求的类，对于Http相关的请求支持和方法都比较全面，推荐使用。</p>\n",
      "image": "https://wuiyan.github.io/assets/images/Servlet/1.png",
      "date_published": "2023-04-18T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "VuePress上传笔记注意事项",
      "url": "https://wuiyan.github.io/posts/VuePress%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html",
      "id": "https://wuiyan.github.io/posts/VuePress%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html",
      "summary": "VuePress 上传笔记注意事项 笔记上传时，展示文章标题的问题： 文章标题与文件名没有关系，与文章内的title属性和第一行的一号标题有关系。 如果只设定了title属性，标题就会是title属性所设置的值。 如果只设定了一号标题，乜有设置title属性，标题就会是一号标题的内容 如果两个都设定了，会显示title属性的内容，一号标题的内容会被忽略，且在文章内会被隐藏。 Markdown文档内附有图片时，应注意：",
      "content_html": "<h1> VuePress 上传笔记注意事项</h1>\n<p>笔记上传时，展示文章标题的问题：</p>\n<p>文章标题与文件名没有关系，与文章内的<strong>title属性</strong>和第一行的<strong>一号标题</strong>有关系。</p>\n<ol>\n<li>如果只设定了title属性，标题就会是title属性所设置的值。</li>\n<li>如果只设定了一号标题，乜有设置title属性，标题就会是一号标题的内容</li>\n<li>如果两个都设定了，会显示title属性的内容，一号标题的内容会被忽略，且在文章内会被隐藏。</li>\n</ol>\n<p>Markdown文档内附有图片时，应注意：</p>\n<ol>\n<li>路径中可以出现中文，但图片名称中不能存在空格</li>\n<li>图片的后缀名要和文档中保持一致，否则会无法访问到图片，并且图片后缀名要小写，否则编译时会出现问题。</li>\n</ol>\n",
      "date_published": "2023-10-26T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "md文档转移到VuePress博客工具",
      "url": "https://wuiyan.github.io/posts/md%E6%96%87%E6%A1%A3%E8%BD%AC%E7%A7%BB%E5%88%B0VuePress%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7.html",
      "id": "https://wuiyan.github.io/posts/md%E6%96%87%E6%A1%A3%E8%BD%AC%E7%A7%BB%E5%88%B0VuePress%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7.html",
      "summary": "md文档转移到VuePress博客工具 工具名称：Markdown图片链接格式转换器 个人博客框架: VuePress 工具作用： 1.将当前目录下所有的Markdown文件中的图片路径修改为个人博客上传时的路径格式， 2.自动将文档链接图片和修改后的文档复制到博客指定目录，省去手动调节的时间。 3.同时为文档添加标题和日期信息，其余详细描述需要手动添加。 config.ini文件：用于设置保存的路径信息。 注：个人自制小工具，基本无安全性检查。",
      "content_html": "<h1> md文档转移到VuePress博客工具</h1>\n<p><strong>工具名称</strong>：Markdown图片链接格式转换器\n<strong>个人博客框架:</strong> VuePress</p>\n<p><strong>工具作用：</strong>\n1.将当前目录下所有的Markdown文件中的图片路径修改为个人博客上传时的路径格式，\n2.自动将文档链接图片和修改后的文档复制到博客指定目录，省去手动调节的时间。\n3.同时为文档添加标题和日期信息，其余详细描述需要手动添加。</p>\n<p>config.ini文件：用于设置保存的路径信息。</p>\n<p>注：个人自制小工具，基本无安全性检查。</p>\n<p><strong>蓝奏云链接</strong>：<a href=\"https://wwfj.lanzoul.com/i9PFr1biahcf\" target=\"_blank\" rel=\"noopener noreferrer\">https://wwfj.lanzoul.com/i9PFr1biahcf</a></p>\n<p><strong>Github地址</strong>：<a href=\"https://github.com/wuiyan/NotionToVuePress\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/wuiyan/NotionToVuePress</a></p>\n<p><strong>更新记录：</strong></p>\n<ol>\n<li>解决 notion 链接图片使用URL编码本地无法识别的问题</li>\n<li>解决notion多个图片时，导出的图片名称会存在空格的情况</li>\n</ol>\n",
      "date_published": "2023-10-04T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "个人域名完整配置流程",
      "url": "https://wuiyan.github.io/posts/%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B.html",
      "id": "https://wuiyan.github.io/posts/%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B.html",
      "summary": "个人域名完整配置流程 域名完整配置流程 1. 域名的购买 域名购买方式 Buy a domain name -Namecheap ：国外域名购买网站，购买手续简单，域名全面，国内支付比较麻烦，只支持PayPal、卡支付、虚拟货币支付。 域名注册_阿里云 (aliyun.com) ：国内域名购买网站，购买时需完成备案，部分域名无法注册，一次购买多年域名使用权较为便宜，国内支付方便。",
      "content_html": "<h1> 个人域名完整配置流程</h1>\n<h2> 域名完整配置流程</h2>\n<h3> 1. 域名的购买</h3>\n<ul>\n<li>域名购买方式</li>\n</ul>\n<p><a href=\"https://www.namecheap.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Buy a domain name -Namecheap</a> ：国外域名购买网站，购买手续简单，域名全面，国内支付比较麻烦，只支持PayPal、卡支付、虚拟货币支付。</p>\n<p><a href=\"https://wanwang.aliyun.com/domain\" target=\"_blank\" rel=\"noopener noreferrer\">域名注册_阿里云 (aliyun.com)</a> ：国内域名购买网站，购买时需完成备案，部分域名无法注册，一次购买多年域名使用权较为便宜，国内支付方便。</p>\n<h3> Namecheap购买域名</h3>\n<ol>\n<li><strong>使用邮箱，注册namecheap账号</strong>，注册后可享受域名购买优惠，建议注册后操作。</li>\n<li>在namecheap主页进行搜索自己想要的域名名称，在域名展示的部分可以查看域名的每年的租金价格以及续约的金额，一般第一年会便宜一些，可以在右上角将金额设置为自己习惯的单位，支持美元、人民币等。</li>\n<li>按照自己的需要找到自己想要的域名并选择好所需的时间，就可以将其<strong>添加到购物车</strong>中，进行提交订单操作。</li>\n<li>初次使用会让你填写本人的详细信息，视个人情况填写即可，只要<strong>格式符合</strong>对内容没有要求，只要确保邮箱地址正确即可，之后选择支付方式，我这里使用的是<strong>PayPal进行支付</strong>，登录自己的PayPal账号，选择PayPal支付，之后选择付款方式，确认即可完成购买。</li>\n</ol>\n<h3> 阿里云购买域名</h3>\n<p>参考教程：<a href=\"https://help.aliyun.com/document_detail/456480.html?spm=5176.22414175.sslink.3.3f9e2468C9C2JP\" target=\"_blank\" rel=\"noopener noreferrer\">如何在品牌商城中完成域名购买_企业商城LinkedMall-阿里云帮助中心 (aliyun.com)</a></p>\n<h3> 2.域名的配置</h3>\n<h3> namecheap中域名的配置</h3>\n<ol>\n<li>\n<p>在个人主页中进入控制台页面，<strong>选中Domain List</strong> ，进入域名列表，可以查看刚购买域名的基本信息。</p>\n</li>\n<li>\n<p>点击管理按钮进入域名的管理页面，在Domain页面是当前域名的信息展示，如：域名的状态、有效时间、NameServers、Redirect Domain等。</p>\n<figure><img src=\"/assets/images/个人域名完整配置流程/1.png\" alt=\"Untitled\" tabindex=\"0\" loading=\"lazy\"><figcaption>Untitled</figcaption></figure>\n</li>\n<li>\n<p><strong>Redirect Domain</strong> : 域名重定向，可将目标域名重定向指定指定域名，在新旧域名切换时用到。</p>\n</li>\n<li>\n<p><strong>NameServers</strong> ：用以设置 DNS 解析服务器，有 Namecheap BasicDNS 和 Custom DNS 两种，<strong>默认是Namecheap BasicDNS</strong>，使用的是 Namecheap 本身的DNS解析服务，可以在 Advanced DNS 中设置域名的映射方式。Custom DNS使用的是自定义的 DNS 解析服务器。<strong>配置流程：</strong></p>\n<p><strong>Namecheap BasicDNS配置</strong>：进入 Advanced DNS 页面，在 HOST RECORDS 中选择自己需要的记录类型进行添加记录操作。</p>\n<p>主机记录类型解释：</p>\n<ol>\n<li><strong>A record (IPv4) ：允许域名和IPv4的地址相关联</strong></li>\n<li><strong>AAAA record (IPv6) ： 允许域名指向IPv6的地址</strong></li>\n<li><strong>ALIAS record 别名记录 ： 用于将一个域名指向另一个域名，可与该名称上的其他记录共存</strong></li>\n<li><strong>CNAME record 别名记录：用于将当前域名指向目标域名的IP地址</strong></li>\n</ol>\n<figure><img src=\"/assets/images/个人域名完整配置流程/2.png\" alt=\"Untitled\" tabindex=\"0\" loading=\"lazy\"><figcaption>Untitled</figcaption></figure>\n<p><strong>Custom DNS 自定义DNS解析服务器</strong> 选择的是国内的 DNSPod 解析服务，基础版免费。</p>\n<p>DNS配置地址：<a href=\"https://console.dnspod.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">DNSPod - 域名管理</a></p>\n<ol>\n<li>注册或登录腾讯云的DNPOD网站，按照个人信息完成实名认证后即可进行配置。</li>\n<li>在我的域名中开始添加域名，让其自动检测后会自动生成许多条DNS解析记录，选择自己需要的记录添加即可。</li>\n<li>此时可以看到页面提示DNS服务器未验证，复制DNSPOD提供的两个DNS服务器地址（注意DNSPOD提供的服务器地址默认是带复制快捷按钮的）</li>\n<li>打开namecheap，进入域名管理修改DNS解析服务器类型为 Custom DNS，将解析服务器地址分别粘贴后，保存提交，等待缓存刷新即可。</li>\n</ol>\n</li>\n</ol>\n<h3> PayPal 用户注册</h3>\n<p><strong>注册地址：</strong><a href=\"https://www.paypal.com/c2/welcome/signup/#/country_selection\" target=\"_blank\" rel=\"noopener noreferrer\">注册个人账户 | PayPal</a></p>\n<p><strong>步骤：</strong> 按照个人情况进行实际填写，依据提示依次执行即可。</p>\n<p>关联银行卡时，国内选择银联即可，主流银行卡基本都支持，如：工商银行、农业银行、建设银行、中国银行等。</p>\n<p>注：PayPal没有支付密码的概念，要保管好自己的登录密码，也可以开启PayPal的双重认证来提高安全性。</p>\n",
      "image": "https://wuiyan.github.io/assets/images/个人域名完整配置流程/1.png",
      "date_published": "2023-09-22T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "博客搭建"
      ]
    },
    {
      "title": "关于Java中注解的使用",
      "url": "https://wuiyan.github.io/posts/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8.html",
      "id": "https://wuiyan.github.io/posts/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8.html",
      "summary": "一、注解的概述 注解(Annotation)，也叫元数据，是一种代码级别的说明，可以在程序中设定标记，这些标记可以用于检查代码、生成文档、使用反射等。 简单来说,注解是一种将meta标记(meta-tag)与程序元素关联的机制,允许编译器(compiler)或JVM从有注解的元素提取程序行为,必要时生成相互依赖的代码。 注解可以在包、类、方法、字段、局部变量、方法参数等几乎所有的东西前面声明，声明方法是 ‘@注解名’ 。后面还可添加参数。 1.1、注解的种类 注解分为两种，一种是预设注解，由Java原生提供的注解类型，另一种是元注解，用来定义注解的注解，常常用来自定义其他注解",
      "content_html": "<h4> 一、注解的概述</h4>\n<p>注解(Annotation)，也叫元数据，是一种代码级别的说明，可以在程序中设定标记，这些标记可以用于检查代码、生成文档、使用反射等。</p>\n<p>简单来说,注解是一种将meta标记(meta-tag)与程序元素关联的机制,允许编译器(compiler)或JVM从有注解的元素提取程序行为,必要时生成相互依赖的代码。</p>\n<p>注解可以在包、类、方法、字段、局部变量、方法参数等几乎所有的东西前面声明，声明方法是 ‘@注解名’ 。后面还可添加参数。</p>\n<h6> 1.1、注解的种类</h6>\n<p>注解分为两种，一种是预设注解，由Java原生提供的注解类型，另一种是元注解，用来定义注解的注解，常常用来自定义其他注解</p>\n<h4> 二、预设注解</h4>\n<ul>\n<li><code>@Deprecated</code>：表示某个类或方法已过时，有更好的解决方案。</li>\n<li><code>@Override</code>：提示子类要复写父类中被 @Override 修饰的方法。</li>\n<li><code>@SuppressWarnings</code>：指示编译器忽略注解中声明的警告。</li>\n<li><code>@SafeVarargs</code>：提醒开发者不要用参数做一些不安全的操作。</li>\n<li><code>@Functionallnterface</code>：用翔实的注释类型来表示一个接口类型声明的目的是空功能接口由java语言规范定义。</li>\n</ul>\n<h4> 三、元注解</h4>\n<ul>\n<li><code>@Retention</code>：指定了注解的保留范围。</li>\n<li><code>@Documented</code>：指定了注解将被 Javadoc 工具提取成文档，包含到 Javadoc 中去。</li>\n<li><code>@Target</code>：指定了注解运用的地方。</li>\n<li><code>@Inherited</code>：指定了注解将具有继承性。</li>\n<li><code>@Repeatable</code>：指定了注解是可重复的。</li>\n</ul>\n<h6> 3.1、@Retention</h6>\n<p>当 @Retention 应用到一个注解上的时候，它解释说明了这个注解的的存活时间。</p>\n<ul>\n<li>RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。(存活的时间是在源码和编译中)</li>\n<li>RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</li>\n<li>RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。</li>\n</ul>\n<div class=\"language-Java line-numbers-mode\" data-ext=\"Java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h6> 3.2、@Target</h6>\n<p>用于给定义的注解限制其生效范围。</p>\n<ul>\n<li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li>\n<li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li>\n<li>ElementType.FIELD 可以给属性进行注解</li>\n<li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li>\n<li>ElementType.METHOD 可以给方法进行注解</li>\n<li>ElementType.PACKAGE 可以给一个包进行注解</li>\n<li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li>\n<li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li>\n</ul>\n<p>例子：</p>\n<div class=\"language-Java line-numbers-mode\" data-ext=\"Java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 四、自定义注解</h4>\n<h6> 1、自定义注解的定义</h6>\n<p>使用 @interface 关键字进行定义，内部只可以放属性，不可以有方法，属性也可以设置默认值，使用关键字default定义，</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h6> 2、使用元注解修饰自定义注解</h6>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 五、注解的作用</h4>\n<p>注解虽然不直接影响代码的语义，但可以通过使用注解可以在程序的不同阶段获得注解上的信息，从而通过使用反射等方式动态的对程序做出一定的干预。</p>\n",
      "date_published": "2023-03-16T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "JavaSE"
      ]
    },
    {
      "title": "在GitHub的个人博客站点上修改域名为个人域名",
      "url": "https://wuiyan.github.io/posts/%E5%9C%A8GitHub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E4%B8%8A%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D%E4%B8%BA%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D.html",
      "id": "https://wuiyan.github.io/posts/%E5%9C%A8GitHub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E4%B8%8A%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D%E4%B8%BA%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D.html",
      "summary": "在GitHub的个人博客站点上修改域名为个人域名 环境信息： 博客搭建模板：VuePress 搭建站点：GitHub 操作流程： 准备好个人域名 在个人域名配置管理页面添加CNAME 记录，使当前域名指向GitHub中的个人博客地址，注意此时是使用二级域名指向的目标地址，如果想使用 裸域(example.com) 指向目标地址，不建议使用CNAME 记录进行指向，请使用 ALIAS 记录或其他记录。 Untitled 在GitHub的网站部署仓库中，打开Settings，找到Pages选项，在Custom domain 中按照在域名管理系统中的指向设置自定义域名即可。 Untitled Untitled",
      "content_html": "<h1> 在GitHub的个人博客站点上修改域名为个人域名</h1>\n<h3> 环境信息：</h3>\n<p>博客搭建模板：VuePress</p>\n<p>搭建站点：GitHub</p>\n<h3> 操作流程：</h3>\n<ol>\n<li>\n<p>准备好个人域名</p>\n</li>\n<li>\n<p>在个人域名配置管理页面添加<strong>CNAME 记录</strong>，使当前域名指向GitHub中的个人博客地址，注意此时是使用二级域名指向的目标地址，如果想使用 <strong>裸域(<a href=\"http://example.com\" target=\"_blank\" rel=\"noopener noreferrer\">example.com</a>)</strong> 指向目标地址，不建议使用CNAME 记录进行指向，请使用 <strong>ALIAS 记录或其他记录</strong>。</p>\n<figure><img src=\"/assets/images/在GitHub的个人博客站点上修改域名为个人域名/1.png\" alt=\"Untitled\" tabindex=\"0\" loading=\"lazy\"><figcaption>Untitled</figcaption></figure>\n</li>\n<li>\n<p>在GitHub的网站部署仓库中，打开Settings，找到Pages选项，在Custom domain 中按照在域名管理系统中的指向设置自定义域名即可。</p>\n<figure><img src=\"/assets/images/在GitHub的个人博客站点上修改域名为个人域名/2.png\" alt=\"Untitled\" tabindex=\"0\" loading=\"lazy\"><figcaption>Untitled</figcaption></figure>\n<hr>\n<figure><img src=\"/assets/images/在GitHub的个人博客站点上修改域名为个人域名/3.png\" alt=\"Untitled\" tabindex=\"0\" loading=\"lazy\"><figcaption>Untitled</figcaption></figure>\n</li>\n</ol>\n",
      "image": "https://wuiyan.github.io/assets/images/在GitHub的个人博客站点上修改域名为个人域名/1.png",
      "date_published": "2023-10-11T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "基于Hexo框架+GitHub的个人博客搭建",
      "url": "https://wuiyan.github.io/posts/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6_GitHub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html",
      "id": "https://wuiyan.github.io/posts/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6_GitHub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html",
      "summary": "一、准备工作 1、注册GitHub账号 GitHub官网：https://github.com/ 邮箱：163邮箱可以，QQ邮箱不确定，可自行测试。 可使用QQ邮箱。 注册完成后需要注意几点：1、记住用户名，2、记住密码，3、记住注册邮箱。 作用：用于为博客的远程部署提供域名和静态网页访问功能等。 2、安装node.js",
      "content_html": "<h3> 一、准备工作</h3>\n<h5> 1、注册GitHub账号</h5>\n<p>GitHub官网：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/</a></p>\n<p>邮箱：163邮箱可以，<s>QQ邮箱不确定，可自行测试。</s> 可使用QQ邮箱。</p>\n<p><strong>注册完成后需要注意几点：1、记住用户名，2、记住密码，3、记住注册邮箱。</strong></p>\n<p>作用：用于为博客的远程部署提供域名和静态网页访问功能等。</p>\n<h5> 2、安装node.js</h5>\n<p>node.js官网：<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js (nodejs.org)</a></p>\n<p>最好下载稳定版，安装一般无脑下一步就好，默认设置就可以。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>作用：用于提供hexo博客框架的运行环境，版本不能太低，不然可能不支持。</p>\n<h5> 3、安装Git</h5>\n<p>Git官网：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Git (git-scm.com)</a></p>\n<p>下载安装版就好，也是可以无脑下一步，安装完成后在桌面右键，可以看到右键菜单多了两个选项，即代表安装成功。</p>\n<p>作用：用于管理和连接远程仓库，是一个相当不错的分布式版本控制系统，在这里用来上传本地博客到云端仓库。</p>\n<h5> 4、网页翻译插件</h5>\n<p>因为GitHub是全英文界面，如果英文不好可以使用插件或者翻译工具来帮助自己理接页面内容。对自己英语水平有自信可以无视这一步。</p>\n<h3> 二、搭建本地博客</h3>\n<h5> 1、安装hexo框架</h5>\n<p>hexo官网：<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Hexo</a></p>\n<p>这里需要用到刚刚下载的Git工具在命令行中进行操作，但本质上也只是复制粘贴命令，不需要担心。</p>\n<p>1.1、新建博客文件夹</p>\n<p>为博客新建一个空文件夹，名称随意，记住所在位置路径，之后都要在这里面执行命令。</p>\n<p><strong>在空文件夹内右键——&gt;选中 Git Bash Here ——&gt;进入命令行界面</strong></p>\n<p>依次输入下列命令即可完成hexo博客的搭建</p>\n<p><strong>注：Git工具不支持Ctrl+C快捷键复制，请统一用右键选择复制粘贴</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>若一切正常没什么明显报错或卡死的情况下，你就成功在本地搭建了属于自己的博客，可以通过 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:4000</a> 去访问了。</p>\n<p><strong>注：此博客只有到 hexo本地服务运行时才可访问。</strong></p>\n<p>当然，意外很有可能发生，下面有一些可能的意外情况的处理方法：</p>\n<h5> 2、意外情况处理</h5>\n<p>2.1、如果在使用npm开头的命令卡死时，大概率是因为npm下载默认是从外网下载，速度和稳定性都很感人，这时候可以试下临时换源，在npm命令后缀下列参数就好。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.2、如果在hexo init bolg 初始化博客时卡死，也很有可能是因为网速问题，但这时候不能直接加后缀，是不支持的，将上述命令用下列命令代替就好，下列命令就是所需要执行的步骤。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.3、如果在npm安装依赖包的时候有警告弹出，一般能不管他就不去管他，<sup>_</sup></p>\n<h3> 三、远程部署到GitHub</h3>\n<h5> 1、通过Git工具的ssh连接GitHub</h5>\n<p><strong>配置Git 用户名和邮箱</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>在 git bash here 中创建一个ssh密钥</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>之后在 .ssh文件夹下生成两个文件： id_rsa id_rsa.pub</p>\n<p>注意：pub文件放置的，就是我们的公开的ssh密钥，也是我们之后要用到的ssh密钥。</p>\n<p><strong>将ssh密钥添加到GitHub中</strong></p>\n<p>用文本编辑器打开 id_rsa.pub  文件，复制文件里面的所有内容。</p>\n<p>进去GitHub的个人主页——&gt;进入设置界面——&gt;进入SSH and GPG 页面——&gt;选择New ssh key</p>\n<p>——&gt;将复制的密钥填进去，保存确认就好，有可能需要密码验证，输入确认就好。</p>\n<p><strong>在Git bash here命令窗口中</strong>，输入下列命令</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h5> 2、新建GitHub仓库并设置pags</h5>\n<p>至此Git工具和GitHub的连接就已经基本完成，之后就要准备将GitHub的上传仓库配置好。</p>\n<p>在GitHub个人主页点击新建仓库——&gt;仓库名称需要注意，<strong><a href=\"http://xn--eqr924avxo.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">用户名.github.io</a></strong> 要按照这个格式填写</p>\n<p>——&gt;在Add a README file 前的勾打上——&gt;点击生成仓库。</p>\n<p><strong>注：仓库名一定要按照格式起，比如用户名为 wuyan 则仓库名为 <a href=\"http://wuyan.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">wuyan.github.io</a></strong></p>\n<p>进入新建的仓库，在上方找到仓库设置——&gt;选择左侧的Pages选项——&gt;点击Choose a theme</p>\n<p>——&gt;<strong>选择分支为main 路径为root后点击 Save 保存即可。</strong></p>\n<h5> 3、修改hexo的配置文件</h5>\n<p>在<strong>自己生成的的博客文件夹</strong>下找到 _config.yml 文件，将文件最后的内容按照下列格式修改，repo的位置填写在GitHub仓库的SSH的连接，位置：个人仓库——&gt;Code——&gt;SSH——&gt;复制链接，粘贴即可</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>附：实在找不到文件位置的，可使用文件搜索工具进行查找。</p>\n<p>推荐工具：Everything ，链接：<a href=\"https://www.voidtools.com/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">voidtools</a></p>\n<h3> 四、上传网站并测试</h3>\n<p>到这一步基本上所有的步骤都已进行完毕，只要将本地博客上传到GitHub即可。</p>\n<p>在博客根目录启动 git Bash Here 命令行窗口，运行下列命令上传到GitHub仓库</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>上传完成后就可以在GitHub中看到自己的网页文件，可以通过 <strong><a href=\"http://xn--eqr924avxo.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">用户名.github.io</a></strong>  去访问自己的网页了，到此整体博客就搭建完成了，如果上传卡死，可以用Ctrl + C 组合键取消后重试，直至文件全部上传成功。</p>\n<!--最后祝有志者事竟成！-->",
      "date_published": "2023-03-14T00:00:00.000Z",
      "date_modified": "2025-02-10T08:11:18.000Z",
      "authors": [],
      "tags": [
        "博客搭建"
      ]
    }
  ]
}